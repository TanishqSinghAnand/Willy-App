{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\coding\\\\WirelessLibrary\\\\screens\\\\BookTransactionScreen.js\";\nimport React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as Permissions from \"expo-permissions\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\nimport * as firebase from \"firebase\";\nimport db from \"../config.js\";\n\nvar TransactionScreen = function (_React$Component) {\n  _inherits(TransactionScreen, _React$Component);\n\n  function TransactionScreen() {\n    var _this;\n\n    _classCallCheck(this, TransactionScreen);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TransactionScreen).call(this));\n\n    _this.getCameraPermissions = function _callee(id) {\n      var _await$Permissions$as, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.CAMERA));\n\n            case 2:\n              _await$Permissions$as = _context.sent;\n              status = _await$Permissions$as.status;\n\n              _this.setState({\n                hasCameraPermissions: status === \"granted\",\n                buttonState: id,\n                scanned: false\n              });\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      });\n    };\n\n    _this.handleBarCodeScanned = function _callee2(_ref) {\n      var type, data, buttonState;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              type = _ref.type, data = _ref.data;\n              buttonState = _this.state.buttonState;\n\n              if (buttonState === \"BookId\") {\n                _this.setState({\n                  scanned: true,\n                  scannedBookId: data,\n                  buttonState: \"normal\"\n                });\n              } else if (buttonState === \"StudentId\") {\n                _this.setState({\n                  scanned: true,\n                  scannedStudentId: data,\n                  buttonState: \"normal\"\n                });\n              }\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      });\n    };\n\n    _this.initiateBookIssue = function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              db.collection(\"transactions\").add({\n                studentId: _this.state.scannedStudentId,\n                bookId: _this.state.scannedBookId,\n                date: firebase.firestore.Timestamp.now().toDate(),\n                transactionType: \"Issue\"\n              });\n              db.collection(\"books\").doc(_this.state.scannedBookId).update({\n                bookAvailability: false\n              });\n              db.collection(\"students\").doc(_this.state.scannedStudentId).update({\n                numberOfBooksIssued: firebase.firestore.FieldValue.increment(1)\n              });\n\n              _this.setState({\n                scannedStudentId: \"\",\n                scannedBookId: \"\"\n              });\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      });\n    };\n\n    _this.initiateBookReturn = function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              db.collection(\"transactions\").add({\n                studentId: _this.state.scannedStudentId,\n                bookId: _this.state.scannedBookId,\n                date: firebase.firestore.Timestamp.now().toDate(),\n                transactionType: \"Return\"\n              });\n              db.collection(\"books\").doc(_this.state.scannedBookId).update({\n                bookAvailability: true\n              });\n              db.collection(\"students\").doc(_this.state.scannedStudentId).update({\n                numberOfBooksIssued: firebase.firestore.FieldValue.increment(-1)\n              });\n\n              _this.setState({\n                scannedStudentId: \"\",\n                scannedBookId: \"\"\n              });\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      });\n    };\n\n    _this.checkBookEligibility = function _callee5() {\n      var bookRef, transactionType;\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _regeneratorRuntime.awrap(db.collection(\"books\").where(\"bookId\", \"==\", _this.state.scannedBookId).get());\n\n            case 2:\n              bookRef = _context5.sent;\n              transactionType = \"\";\n\n              if (bookRef.docs.length == 0) {\n                transactionType = false;\n              } else {\n                bookRef.docs.map(function (doc) {\n                  var book = doc.data();\n\n                  if (book.bookAvailability) {\n                    transactionType = \"Issue\";\n                  } else {\n                    transactionType = \"Return\";\n                  }\n                });\n              }\n\n              return _context5.abrupt(\"return\", transactionType);\n\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      });\n    };\n\n    _this.checkStudentEligibilityForBookIssue = function _callee6() {\n      var studentRef, isStudentEligible;\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _regeneratorRuntime.awrap(db.collection(\"students\").where(\"studentId\", \"==\", _this.state.scannedStudentId).get());\n\n            case 2:\n              studentRef = _context6.sent;\n              isStudentEligible = \"\";\n\n              if (studentRef.docs.length == 0) {\n                _this.setState({\n                  scannedStudentId: \"\",\n                  scannedBookId: \"\"\n                });\n\n                isStudentEligible = false;\n                Alert.alert(\"The student id doesn't exist in the database!\");\n              } else {\n                studentRef.docs.map(function (doc) {\n                  var student = doc.data();\n\n                  if (student.numberOfBooksIssued < 2) {\n                    isStudentEligible = true;\n                  } else {\n                    isStudentEligible = false;\n                    Alert.alert(\"The student has already issued 2 books!\");\n\n                    _this.setState({\n                      scannedStudentId: \"\",\n                      scannedBookId: \"\"\n                    });\n                  }\n                });\n              }\n\n              return _context6.abrupt(\"return\", isStudentEligible);\n\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      });\n    };\n\n    _this.checkStudentEligibilityForReturn = function _callee7() {\n      var transactionRef, isStudentEligible;\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _regeneratorRuntime.awrap(db.collection(\"transactions\").where(\"bookId\", \"==\", _this.state.scannedBookId).limit(1).get());\n\n            case 2:\n              transactionRef = _context7.sent;\n              isStudentEligible = \"\";\n              transactionRef.docs.map(function (doc) {\n                var lastBookTransaction = doc.data();\n\n                if (lastBookTransaction.studentId === _this.state.scannedStudentId) {\n                  isStudentEligible = true;\n                } else {\n                  isStudentEligible = false;\n                  Alert.alert(\"The book wasn't issued by this student!\");\n\n                  _this.setState({\n                    scannedStudentId: \"\",\n                    scannedBookId: \"\"\n                  });\n                }\n              });\n              return _context7.abrupt(\"return\", isStudentEligible);\n\n            case 6:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      });\n    };\n\n    _this.handleTransaction = function _callee8() {\n      var transactionType, isStudentEligible;\n      return _regeneratorRuntime.async(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _regeneratorRuntime.awrap(_this.checkBookEligibility());\n\n            case 2:\n              transactionType = _context8.sent;\n\n              if (transactionType) {\n                _context8.next = 8;\n                break;\n              }\n\n              Alert.alert(\"The book doesn't exist in the library database!\");\n\n              _this.setState({\n                scannedStudentId: \"\",\n                scannedBookId: \"\"\n              });\n\n              _context8.next = 19;\n              break;\n\n            case 8:\n              if (!(transactionType === \"Issue\")) {\n                _context8.next = 15;\n                break;\n              }\n\n              _context8.next = 11;\n              return _regeneratorRuntime.awrap(_this.checkStudentEligibilityForBookIssue());\n\n            case 11:\n              isStudentEligible = _context8.sent;\n\n              if (isStudentEligible) {\n                _this.initiateBookIssue();\n\n                Alert.alert(\"Book issued to the student!\");\n              }\n\n              _context8.next = 19;\n              break;\n\n            case 15:\n              _context8.next = 17;\n              return _regeneratorRuntime.awrap(_this.checkStudentEligibilityForReturn());\n\n            case 17:\n              isStudentEligible = _context8.sent;\n\n              if (isStudentEligible) {\n                _this.initiateBookReturn();\n\n                Alert.alert(\"Book returned to the library!\");\n              }\n\n            case 19:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      });\n    };\n\n    _this.state = {\n      hasCameraPermissions: null,\n      scanned: false,\n      scannedBookId: \"\",\n      scannedStudentId: \"\",\n      buttonState: \"normal\",\n      transactionMessage: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(TransactionScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var hasCameraPermissions = this.state.hasCameraPermissions;\n      var scanned = this.state.scanned;\n      var buttonState = this.state.buttonState;\n\n      if (buttonState !== \"normal\" && hasCameraPermissions) {\n        return React.createElement(BarCodeScanner, {\n          onBarCodeScanned: scanned ? undefined : this.handleBarCodeScanned,\n          style: StyleSheet.absoluteFillObject,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228\n          }\n        });\n      } else if (buttonState === \"normal\") {\n        return React.createElement(KeyboardAvoidingView, {\n          behavior: \"padding\",\n          style: styles.container,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235\n          }\n        }, React.createElement(View, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236\n          }\n        }, React.createElement(Image, {\n          source: require(\"../assets/booklogo.jpg\"),\n          style: {\n            width: 200,\n            height: 200\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 237\n          }\n        }), React.createElement(Text, {\n          style: {\n            textAlign: \"center\",\n            fontSize: 30\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241\n          }\n        }, \"Wily\")), React.createElement(View, {\n          style: styles.inputView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243\n          }\n        }, React.createElement(TextInput, {\n          style: styles.inputBox,\n          placeholder: \"Book Id\",\n          onChangeText: function onChangeText(text) {\n            _this2.setState({\n              scannedBookId: text\n            });\n          },\n          value: this.state.scannedBookId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          }\n        }), React.createElement(TouchableOpacity, {\n          style: styles.scanButton,\n          onPress: function onPress() {\n            _this2.getCameraPermissions(\"BookId\");\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254\n          }\n        }, React.createElement(Text, {\n          style: styles.buttonText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260\n          }\n        }, \"Scan\"))), React.createElement(View, {\n          style: styles.inputView,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          }\n        }, React.createElement(TextInput, {\n          style: styles.inputBox,\n          placeholder: \"Student Id\",\n          onChangeText: function onChangeText(text) {\n            _this2.setState({\n              scannedStudentId: text\n            });\n          },\n          value: this.state.scannedStudentId,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265\n          }\n        }), React.createElement(TouchableOpacity, {\n          style: styles.scanButton,\n          onPress: function onPress() {\n            _this2.getCameraPermissions(\"StudentId\");\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 275\n          }\n        }, React.createElement(Text, {\n          style: styles.buttonText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 281\n          }\n        }, \"Scan\"))), React.createElement(Text, {\n          style: styles.transactionAlert,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284\n          }\n        }, this.state.transactionMessage), React.createElement(TouchableOpacity, {\n          style: styles.submitButton,\n          onPress: function _callee9() {\n            var transactionMessage;\n            return _regeneratorRuntime.async(function _callee9$(_context9) {\n              while (1) {\n                switch (_context9.prev = _context9.next) {\n                  case 0:\n                    transactionMessage = _this2.handleTransaction();\n\n                  case 1:\n                  case \"end\":\n                    return _context9.stop();\n                }\n              }\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287\n          }\n        }, React.createElement(Text, {\n          style: styles.submitButtonText,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293\n          }\n        }, \"Submit\")));\n      }\n    }\n  }]);\n\n  return TransactionScreen;\n}(React.Component);\n\nexport { TransactionScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  displayText: {\n    fontSize: 15,\n    textDecorationLine: \"underline\"\n  },\n  scanButton: {\n    backgroundColor: \"#2196F3\",\n    padding: 10,\n    margin: 10\n  },\n  buttonText: {\n    fontSize: 15,\n    textAlign: \"center\",\n    marginTop: 10\n  },\n  inputView: {\n    flexDirection: \"row\",\n    margin: 20\n  },\n  inputBox: {\n    width: 200,\n    height: 40,\n    borderWidth: 1.5,\n    borderRightWidth: 0,\n    fontSize: 20\n  },\n  scanButton: {\n    backgroundColor: \"#66BB6A\",\n    width: 50,\n    borderWidth: 1.5,\n    borderLeftWidth: 0\n  },\n  submitButton: {\n    backgroundColor: \"#FBC02D\",\n    width: 100,\n    height: 50\n  },\n  submitButtonText: {\n    padding: 10,\n    textAlign: \"center\",\n    fontSize: 20,\n    fontWeight: \"bold\",\n    color: \"white\"\n  },\n  transactionAlert: {\n    margin: 10,\n    color: \"red\"\n  }\n});","map":{"version":3,"sources":["C:/coding/WirelessLibrary/screens/BookTransactionScreen.js"],"names":["React","Permissions","BarCodeScanner","firebase","db","TransactionScreen","getCameraPermissions","id","askAsync","CAMERA","status","setState","hasCameraPermissions","buttonState","scanned","handleBarCodeScanned","type","data","state","scannedBookId","scannedStudentId","initiateBookIssue","collection","add","studentId","bookId","date","firestore","Timestamp","now","toDate","transactionType","doc","update","bookAvailability","numberOfBooksIssued","FieldValue","increment","initiateBookReturn","checkBookEligibility","where","get","bookRef","docs","length","map","book","checkStudentEligibilityForBookIssue","studentRef","isStudentEligible","Alert","alert","student","checkStudentEligibilityForReturn","limit","transactionRef","lastBookTransaction","handleTransaction","transactionMessage","undefined","StyleSheet","absoluteFillObject","styles","container","require","width","height","textAlign","fontSize","inputView","inputBox","text","scanButton","buttonText","transactionAlert","submitButton","submitButtonText","Component","create","flex","justifyContent","alignItems","displayText","textDecorationLine","backgroundColor","padding","margin","marginTop","flexDirection","borderWidth","borderRightWidth","borderLeftWidth","fontWeight","color"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  Text,\n  View,\n  TouchableOpacity,\n  TextInput,\n  Image,\n  StyleSheet,\n  KeyboardAvoidingView,\n  Alert\n} from \"react-native\";\nimport * as Permissions from \"expo-permissions\";\nimport { BarCodeScanner } from \"expo-barcode-scanner\";\nimport * as firebase from \"firebase\";\nimport db from \"../config.js\";\n\nexport default class TransactionScreen extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      hasCameraPermissions: null,\n      scanned: false,\n      scannedBookId: \"\",\n      scannedStudentId: \"\",\n      buttonState: \"normal\",\n      transactionMessage: \"\"\n    };\n  }\n\n  getCameraPermissions = async id => {\n    const { status } = await Permissions.askAsync(Permissions.CAMERA);\n\n    this.setState({\n      /*status === \"granted\" is true when user has granted permission\n          status === \"granted\" is false when user has not granted the permission\n        */\n      hasCameraPermissions: status === \"granted\",\n      buttonState: id,\n      scanned: false\n    });\n  };\n\n  handleBarCodeScanned = async ({ type, data }) => {\n    const { buttonState } = this.state;\n\n    if (buttonState === \"BookId\") {\n      this.setState({\n        scanned: true,\n        scannedBookId: data,\n        buttonState: \"normal\"\n      });\n    } else if (buttonState === \"StudentId\") {\n      this.setState({\n        scanned: true,\n        scannedStudentId: data,\n        buttonState: \"normal\"\n      });\n    }\n  };\n\n  initiateBookIssue = async () => {\n    //add a transaction\n    db.collection(\"transactions\").add({\n      studentId: this.state.scannedStudentId,\n      bookId: this.state.scannedBookId,\n      date: firebase.firestore.Timestamp.now().toDate(),\n      transactionType: \"Issue\"\n    });\n    //change book status\n    db.collection(\"books\")\n      .doc(this.state.scannedBookId)\n      .update({\n        bookAvailability: false\n      });\n    //change number  of issued books for student\n    db.collection(\"students\")\n      .doc(this.state.scannedStudentId)\n      .update({\n        numberOfBooksIssued: firebase.firestore.FieldValue.increment(1)\n      });\n\n    this.setState({\n      scannedStudentId: \"\",\n      scannedBookId: \"\"\n    });\n  };\n\n  initiateBookReturn = async () => {\n    //add a transaction\n    db.collection(\"transactions\").add({\n      studentId: this.state.scannedStudentId,\n      bookId: this.state.scannedBookId,\n      date: firebase.firestore.Timestamp.now().toDate(),\n      transactionType: \"Return\"\n    });\n    //change book status\n    db.collection(\"books\")\n      .doc(this.state.scannedBookId)\n      .update({\n        bookAvailability: true\n      });\n    //change number  of issued books for student\n    db.collection(\"students\")\n      .doc(this.state.scannedStudentId)\n      .update({\n        numberOfBooksIssued: firebase.firestore.FieldValue.increment(-1)\n      });\n\n    this.setState({\n      scannedStudentId: \"\",\n      scannedBookId: \"\"\n    });\n  };\n\n  checkBookEligibility = async () => {\n    const bookRef = await db\n      .collection(\"books\")\n      .where(\"bookId\", \"==\", this.state.scannedBookId)\n      .get();\n    var transactionType = \"\";\n    if (bookRef.docs.length == 0) {\n      transactionType = false;\n    } else {\n      bookRef.docs.map(doc => {\n        var book = doc.data();\n        if (book.bookAvailability) {\n          transactionType = \"Issue\";\n        } else {\n          transactionType = \"Return\";\n        }\n      });\n    }\n\n    return transactionType;\n  };\n\n  checkStudentEligibilityForBookIssue = async () => {\n    const studentRef = await db\n      .collection(\"students\")\n      .where(\"studentId\", \"==\", this.state.scannedStudentId)\n      .get();\n    var isStudentEligible = \"\";\n    if (studentRef.docs.length == 0) {\n      this.setState({\n        scannedStudentId: \"\",\n        scannedBookId: \"\"\n      });\n      isStudentEligible = false;\n      Alert.alert(\"The student id doesn't exist in the database!\");\n    } else {\n      studentRef.docs.map(doc => {\n        var student = doc.data();\n        if (student.numberOfBooksIssued < 2) {\n          isStudentEligible = true;\n        } else {\n          isStudentEligible = false;\n          Alert.alert(\"The student has already issued 2 books!\");\n          this.setState({\n            scannedStudentId: \"\",\n            scannedBookId: \"\"\n          });\n        }\n      });\n    }\n\n    return isStudentEligible;\n  };\n\n  checkStudentEligibilityForReturn = async () => {\n    const transactionRef = await db\n      .collection(\"transactions\")\n      .where(\"bookId\", \"==\", this.state.scannedBookId)\n      .limit(1)\n      .get();\n    var isStudentEligible = \"\";\n    transactionRef.docs.map(doc => {\n      var lastBookTransaction = doc.data();\n      if (lastBookTransaction.studentId === this.state.scannedStudentId) {\n        isStudentEligible = true;\n      } else {\n        isStudentEligible = false;\n        Alert.alert(\"The book wasn't issued by this student!\");\n        this.setState({\n          scannedStudentId: \"\",\n          scannedBookId: \"\"\n        });\n      }\n    });\n    return isStudentEligible;\n  };\n\n  handleTransaction = async () => {\n    //verify if the student is eligible for book issue or return or none\n    //student id exists in the database\n    //issue : number of book issued < 2\n    //issue: verify book availability\n    //return: last transaction -> book issued by the student id\n    var transactionType = await this.checkBookEligibility();\n\n    if (!transactionType) {\n      Alert.alert(\"The book doesn't exist in the library database!\");\n      this.setState({\n        scannedStudentId: \"\",\n        scannedBookId: \"\"\n      });\n    } else if (transactionType === \"Issue\") {\n      var isStudentEligible = await this.checkStudentEligibilityForBookIssue();\n      if (isStudentEligible) {\n        this.initiateBookIssue();\n        Alert.alert(\"Book issued to the student!\");\n      }\n    } else {\n      var isStudentEligible = await this.checkStudentEligibilityForReturn();\n      if (isStudentEligible) {\n        this.initiateBookReturn();\n        Alert.alert(\"Book returned to the library!\");\n      }\n    }\n  };\n\n  render() {\n    const hasCameraPermissions = this.state.hasCameraPermissions;\n    const scanned = this.state.scanned;\n    const buttonState = this.state.buttonState;\n\n    if (buttonState !== \"normal\" && hasCameraPermissions) {\n      return (\n        <BarCodeScanner\n          onBarCodeScanned={scanned ? undefined : this.handleBarCodeScanned}\n          style={StyleSheet.absoluteFillObject}\n        />\n      );\n    } else if (buttonState === \"normal\") {\n      return (\n        <KeyboardAvoidingView behavior=\"padding\" style={styles.container}>\n          <View>\n            <Image\n              source={require(\"../assets/booklogo.jpg\")}\n              style={{ width: 200, height: 200 }}\n            />\n            <Text style={{ textAlign: \"center\", fontSize: 30 }}>Wily</Text>\n          </View>\n          <View style={styles.inputView}>\n            <TextInput\n              style={styles.inputBox}\n              placeholder=\"Book Id\"\n              onChangeText={text => {\n                this.setState({\n                  scannedBookId: text\n                });\n              }}\n              value={this.state.scannedBookId}\n            />\n            <TouchableOpacity\n              style={styles.scanButton}\n              onPress={() => {\n                this.getCameraPermissions(\"BookId\");\n              }}\n            >\n              <Text style={styles.buttonText}>Scan</Text>\n            </TouchableOpacity>\n          </View>\n\n          <View style={styles.inputView}>\n            <TextInput\n              style={styles.inputBox}\n              placeholder=\"Student Id\"\n              onChangeText={text => {\n                this.setState({\n                  scannedStudentId: text\n                });\n              }}\n              value={this.state.scannedStudentId}\n            />\n            <TouchableOpacity\n              style={styles.scanButton}\n              onPress={() => {\n                this.getCameraPermissions(\"StudentId\");\n              }}\n            >\n              <Text style={styles.buttonText}>Scan</Text>\n            </TouchableOpacity>\n          </View>\n          <Text style={styles.transactionAlert}>\n            {this.state.transactionMessage}\n          </Text>\n          <TouchableOpacity\n            style={styles.submitButton}\n            onPress={async () => {\n              var transactionMessage = this.handleTransaction();\n            }}\n          >\n            <Text style={styles.submitButtonText}>Submit</Text>\n          </TouchableOpacity>\n        </KeyboardAvoidingView>\n      );\n    }\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  displayText: {\n    fontSize: 15,\n    textDecorationLine: \"underline\"\n  },\n  scanButton: {\n    backgroundColor: \"#2196F3\",\n    padding: 10,\n    margin: 10\n  },\n  buttonText: {\n    fontSize: 15,\n    textAlign: \"center\",\n    marginTop: 10\n  },\n  inputView: {\n    flexDirection: \"row\",\n    margin: 20\n  },\n  inputBox: {\n    width: 200,\n    height: 40,\n    borderWidth: 1.5,\n    borderRightWidth: 0,\n    fontSize: 20\n  },\n  scanButton: {\n    backgroundColor: \"#66BB6A\",\n    width: 50,\n    borderWidth: 1.5,\n    borderLeftWidth: 0\n  },\n  submitButton: {\n    backgroundColor: \"#FBC02D\",\n    width: 100,\n    height: 50\n  },\n  submitButtonText: {\n    padding: 10,\n    textAlign: \"center\",\n    fontSize: 20,\n    fontWeight: \"bold\",\n    color: \"white\"\n  },\n  transactionAlert: {\n    margin: 10,\n    color: \"red\"\n  }\n});"]},"metadata":{},"sourceType":"module"}